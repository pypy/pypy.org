<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts about sprint)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/categories/sprint.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Jul 2025 11:01:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>(Cape of) Good Hope for PyPy</title><link>https://www.pypy.org/posts/2017/10/cape-of-good-hope-for-pypy-hello-from-3656631725712879033.html</link><dc:creator>Antonio Cuni</dc:creator><description>&lt;div&gt;
&lt;br&gt;&lt;/div&gt;
Hello from the other side of the world (for most of you)!&lt;br&gt;
&lt;br&gt;
With the excuse of coming to &lt;a class="reference external" href="https://za.pycon.org/"&gt;PyCon ZA&lt;/a&gt; during the last two weeks Armin,
Ronan, Antonio and sometimes Maciek had a very nice and productive sprint in
Cape Town, as pictures show :). We would like to say a big thank you to
Kiwi.com, which sponsored part of the travel costs via its awesome &lt;a class="reference external" href="https://www.kiwi.com/sourcelift/"&gt;Sourcelift&lt;/a&gt;
program to help Open Source projects.&lt;br&gt;
&lt;br&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-9YVNucPN1wE/WeaWmTUFB-I/AAAAAAAABMQ/HeVMqS-ya2IYJuk0iZZODlULqpKaf5XcgCLcBGAs/s1600/DSC_2418.JPG" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="225" src="https://3.bp.blogspot.com/-9YVNucPN1wE/WeaWmTUFB-I/AAAAAAAABMQ/HeVMqS-ya2IYJuk0iZZODlULqpKaf5XcgCLcBGAs/s400/DSC_2418.JPG" width="400"&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Armin, Anto and Ronan at Cape Point&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
Armin, Ronan and Anto spent most of the time hacking at cpyext, our CPython
C-API compatibility layer: during the last years, the focus was to make it
working and compatible with CPython, in order to run existing libraries such
as numpy and pandas. However, we never paid too much attention to performance,
so the net result is that with the latest released version of PyPy, C
extensions generally work but their speed ranges from "slow" to "horribly
slow".&lt;br&gt;
&lt;br&gt;
For example, these very simple &lt;a class="reference external" href="https://github.com/antocuni/cpyext-benchmarks"&gt;microbenchmarks&lt;/a&gt; measure the speed of
calling (empty) C functions, i.e. the time you spend to "cross the border"
between RPython and C.  &lt;i&gt;(Note: this includes the time spent doing the loop in regular Python code.)&lt;/i&gt; These are the results on CPython, on PyPy 5.8, and on
our newest in-progress version:&lt;br&gt;
&lt;br&gt;
&lt;pre class="literal-block"&gt;$ python bench.py     # CPython
noargs      : 0.41 secs
onearg(None): 0.44 secs
onearg(i)   : 0.44 secs
varargs     : 0.58 secs
&lt;/pre&gt;
&lt;div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;$ pypy-5.8 bench.py   # PyPy 5.8
noargs      : 1.01 secs
onearg(None): 1.31 secs
onearg(i)   : 2.57 secs
varargs     : 2.79 secs
&lt;/pre&gt;
&lt;div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;$ pypy bench.py       # cpyext-refactor-methodobject branch
noargs      : 0.17 secs
onearg(None): 0.21 secs
onearg(i)   : 0.22 secs
varargs     : 0.47 secs
&lt;/pre&gt;
&lt;div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;&lt;/pre&gt;
&lt;pre class="literal-block"&gt;&lt;/pre&gt;
So yes: before the sprint, we were ~2-6x slower than CPython. Now, we are
&lt;strong&gt;faster&lt;/strong&gt; than it!
To reach this result, we did various improvements, such as:
&lt;br&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;teach the JIT how to look (a bit) inside the cpyext module;&lt;/li&gt;
&lt;li&gt;write specialized code for calling &lt;tt class="docutils literal"&gt;METH_NOARGS&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;METH_O&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;METH_VARARGS&lt;/tt&gt; functions; previously, we always used a very general and
slow logic;&lt;/li&gt;
&lt;li&gt;implement freelists to allocate the cpyext versions of &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;tuple&lt;/tt&gt; objects, as CPython does;&lt;/li&gt;
&lt;li&gt;the &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/merge_requests/573"&gt;cpyext-avoid-roundtrip&lt;/a&gt; branch: crossing the RPython/C border is
slowish, but the real problem was (and still is for many cases) we often
cross it many times for no good reason. So, depending on the actual API
call, you might end up in the C land, which calls back into the RPython
land, which goes to C, etc. etc. (ad libitum).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
The branch tries to fix such nonsense: so far, we fixed only some cases, which
are enough to speed up the benchmarks shown above.  But most importantly, we
now have a clear path and an actual plan to improve cpyext more and
more. Ideally, we would like to reach a point in which cpyext-intensive
programs run at worst at the same speed of CPython.&lt;br&gt;
&lt;br&gt;
The other big topic of the sprint was Armin and Maciej doing a lot of work on the
&lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/branch/unicode-utf8"&gt;unicode-utf8&lt;/a&gt; branch: the goal of the branch is to always use UTF-8 as the
internal representation of unicode strings. The advantages are various:
&lt;br&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;decoding a UTF-8 stream is super fast, as you just need to check that the
stream is valid;&lt;/li&gt;
&lt;li&gt;encoding to UTF-8 is almost a no-op;&lt;/li&gt;
&lt;li&gt;UTF-8 is always more compact representation than the currently
used UCS-4. It's also almost always more compact than CPython 3.5 latin1/UCS2/UCS4 combo;&lt;/li&gt;
&lt;li&gt;smaller representation means everything becomes quite a bit faster due to lower cache pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
Before you ask: yes, this branch contains special logic to ensure that random
access of single unicode chars is still O(1), as it is on both CPython and the
current PyPy.&lt;br&gt;
We also plan to improve the speed of decoding even more by using modern processor features, like SSE and AVX. Preliminary results show that decoding can be done 100x faster than the current setup.
&lt;br&gt;
&lt;br&gt;
In summary, this was a long and profitable sprint, in which we achieved lots
of interesting results. However, what we liked even more was the privilege of
doing &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/a4307fb5912e"&gt;commits&lt;/a&gt; from awesome places such as the top of Table Mountain:&lt;br&gt;
&lt;br&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;div dir="ltr" lang="en"&gt;
Our sprint venue today &lt;a href="https://twitter.com/hashtag/pypy?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#pypy&lt;/a&gt; &lt;a href="https://t.co/o38IfTYmAV"&gt;pic.twitter.com/o38IfTYmAV&lt;/a&gt;&lt;/div&gt;
— Ronan Lamy (@ronanlamy) &lt;a href="https://twitter.com/ronanlamy/status/915575026107240449?ref_src=twsrc%5Etfw"&gt;4 ottobre 2017&lt;/a&gt;&lt;/blockquote&gt;


&lt;br&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://foss.heptapod.net/pypy/extradoc/-/blob/branch/extradoc/sprintinfo/cape-town-2017/2017-10-04-155524.jpg" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="360" src="https://bytebucket.org/pypy/extradoc/raw/extradoc/sprintinfo/cape-town-2017/2017-10-04-155524.jpg" width="640"&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;The panorama we looked at instead of staring at cpyext code&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description><category>cpyext</category><category>profiling</category><category>speed</category><category>sprint</category><category>unicode</category><guid>https://www.pypy.org/posts/2017/10/cape-of-good-hope-for-pypy-hello-from-3656631725712879033.html</guid><pubDate>Wed, 18 Oct 2017 13:31:00 GMT</pubDate></item><item><title>PyPy London Sprint (August 26 - September 1 2013)</title><link>https://www.pypy.org/posts/2013/07/pypy-london-sprint-august-26-september-5156945690440578388.html</link><dc:creator>Carl Friedrich Bolz-Tereick</dc:creator><description>&lt;p&gt;The next PyPy sprint will be in London, United Kingdom for the first
time. This is a fully public sprint. PyPy sprints are a very good way
to get into PyPy development and no prior PyPy knowledge is necessary.&lt;/p&gt;
&lt;h2&gt;Goals and topics of the sprint&lt;/h2&gt;
&lt;p&gt;For newcomers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bring your application/library and we'll help you port it to PyPy,
benchmark and profile&lt;/li&gt;
&lt;li&gt;come and write your favorite missing numpy function&lt;/li&gt;
&lt;li&gt;help us work on developer tools like jitviewer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll also work on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;refactoring the JIT optimizations&lt;/li&gt;
&lt;li&gt;STM and STM-related topics&lt;/li&gt;
&lt;li&gt;anything else attendees are interested in&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exact times&lt;/h2&gt;
&lt;p&gt;The work days should be August 26 - September 1 2013 (Monday-Sunday).
The official plans are for people to arrive on the 26th, and
to leave on the 2nd. There will be a break day in the middle.
We'll typically start at 10:00 in the morning.&lt;/p&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;p&gt;The sprint will happen within a room of &lt;a class="reference external" href="https://www.kcl.ac.uk/"&gt;King's College's&lt;/a&gt; &lt;a class="reference external" href="https://www.kcl.ac.uk/campuslife/campuses/strand/StrandCampusLocation.aspx"&gt;Strand
Campus&lt;/a&gt; in &lt;a class="reference external" href="https://goo.gl/maps/Qz0zz"&gt;Central London, UK&lt;/a&gt;. There are some travel instructions &lt;a class="reference external" href="https://www.kcl.ac.uk/campuslife/campuses/directions/strand.aspx"&gt;how to
get there&lt;/a&gt;. We are being hosted by &lt;a class="reference external" href="https://tratt.net/laurie"&gt;Laurence Tratt&lt;/a&gt; and the &lt;a class="reference external" href="https://soft-dev.org"&gt;Software
Development Team&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Demo Session&lt;/h2&gt;
&lt;p&gt;If you don't want to come to the full sprint, but still want to chat a
bit, we are planning to have a demo session on Tuesday August 27. We
will announce this separately on the blog. If you are interested, please
leave a comment.&lt;/p&gt;
&lt;h2&gt;Registration&lt;/h2&gt;
&lt;p&gt;If you want to attend, please register by adding yourself to the
"people.txt" file in Mercurial:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://bitbucket.org/pypy/extradoc/
https://foss.heptapod.net/pypy/extradoc/-/blob/branch/default/extradoc/sprintinfo/london-2013
&lt;/pre&gt;
&lt;p&gt;or on the pypy-dev mailing list if you do not yet have check-in rights:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://mail.python.org/mailman/listinfo/pypy-dev
&lt;/pre&gt;
&lt;p&gt;Remember that you may need a (insert country here)-to-UK power adapter.
Please note that UK is not within the Schengen zone, so non-EU and
non-Switzerland citizens may require specific visa. Please check &lt;a class="reference external" href="https://www.ukba.homeoffice.gov.uk/visas-immigration/do-you-need-a-visa/"&gt;travel
regulations&lt;/a&gt;. Also, the UK uses pound sterling (GBP).&lt;/p&gt;</description><category>sprint</category><guid>https://www.pypy.org/posts/2013/07/pypy-london-sprint-august-26-september-5156945690440578388.html</guid><pubDate>Fri, 19 Jul 2013 14:58:00 GMT</pubDate></item><item><title>PyPy Winter Sprint Report</title><link>https://www.pypy.org/posts/2011/02/pypy-winter-sprint-report-4155886720346408516.html</link><dc:creator>Michael Foord</dc:creator><description>&lt;p&gt;A few weeks ago I had the great fortune to attend the PyPy winter sprint in Leysin Switzerland. I've wanted to contribute to PyPy for a long time and I thought diving into a sprint might be a good way to get familiar with some of the code. What I wasn't expecting was to be using RPython to implement new methods on built-in Python objects on the first day. The main thing I took away from the sprint was just how easy it is to get involved in developing PyPy (well, some bits of it at least and being surrounded by core developers helps). I wrote up a very short description of how to get started &lt;a href="https://bitbucket.org/pypy/pypy/wiki/How%20to%20run%20lib-python%20tests"&gt;here&lt;/a&gt;, but I'll do a longer blog post with examples on &lt;a href="https://www.voidspace.org.uk/python/weblog/"&gt;my own blog&lt;/a&gt; soon(ish).&lt;br&gt;
&lt;br&gt;
The sprint was kicked off by Armin merging the "fast-forward" branch of PyPy onto trunk. "fast-forward" brings PyPy from Python 2.5 compatibility to Python 2.7. Along with this it brought a large number of test failures, as the sterling work done by Benjamin Peterson and Amaury Forgeot d'Arc was not complete. This immediately set the primary sprint goal to reduce the number of test failures.&lt;br&gt;
&lt;br&gt;
We made a great deal of progress on this front, and you can see how close PyPy is now from the &lt;a href="https://buildbot.pypy.org/summary?branch=%3Ctrunk%3E"&gt;buildbots&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
Jacob Hallén and I started working through the list of tests with failures alphabetically. We made short work of test_asyncore and moved onto test_bytes where I was stuck for the rest of the sprint. I spent much of the remaining days working with Laura Creighton on the pypy bytearray implementation to make it more compatible with Python 2.7. This meant adding new methods, changing some of the Python protocol method implementations and even changing the way that bytearray is constructed. All in all great fun and a great introduction to working with RPython.&lt;br&gt;
&lt;br&gt;
A big part of the compatibility with Python 2.7 work was done by Laura and Armin who basically rewrote the math module from scratch. This was needed to incorporate all the improvements made (mostly by Mark Dickinson) in CPython in 2.7. That involved a lot of head-scratching about such subtleties as whether -0.0 should be considered almost equal to 0.0 and other fun problems.&lt;br&gt;
&lt;span id="goog_788025148"&gt;&lt;/span&gt;&lt;span id="goog_788025149"&gt;&lt;/span&gt;&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;span class="Apple-style-span" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="239" src="https://4.bp.blogspot.com/-mtUgzR-TwUA/TVkXkIjqmXI/AAAAAAAAAVc/bbynq2Dwmg8/s320/first-meal.jpg" width="320"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;a href="https://www.flickr.com/photos/mfoord/sets/72157625889973066/"&gt;The first meal together, before everyone had arrived&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
If you add on top of this the wonderful people, the beautiful scenery, the Swiss cheese fondues, managing to not kill myself with a days skiing and traditional pypy card games, I can heartily recommend pypy sprints as a close approximation of geek nirvana.&lt;br&gt;
&lt;br&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;span class="Apple-style-span" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="239" src="https://4.bp.blogspot.com/-qP95S6g9X9k/TVkYJKNYTQI/AAAAAAAAAVg/Pm3q36yMiLY/s320/mountains.jpg" width="320"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;a href="https://www.flickr.com/photos/mfoord/sets/72157625889973066/"&gt;View of the mountains from the sprint&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
Working on 2.7 compatibility wasn't the only work that happened during the sprint. Other activities included:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Antonio Cuni worked on the "jittypes" branch. This is a reimplementation of the core of the PyPy ctypes code to make it jittable. The goal is that for common cases the jit should be able to turn ctypes calls from Python into direct C level calls. This work was not completed but very close and is great for the future of integrating C libraries with PyPy. As ctypes is also available in CPython and IronPython, and hopefully will be available in Jython soon, integrating C code with Python through ctypes is the most "implementation portable" technique.&lt;/li&gt;
&lt;li&gt;David Schneider continued his work on the &lt;a href="https://www.pypy.org/posts/2011/01/jit-backend-for-arm-processors-5994810755839586463.html"&gt;JIT backend for ARM&lt;/a&gt;. PyPy has been cross-compilable to ARM for a long time, but bringing the JIT to ARM will provide a *fast* PyPy for ARM, which includes platforms like Android. Again David didn't complete this work but did complete the float support.&lt;/li&gt;
&lt;li&gt;Håkan Ardo was present for two days and continued his crazy-clever work on JIT optimisations, some of which are described in the &lt;a href="https://www.pypy.org/posts/2011/01/loop-invariant-code-motion-1998392217676829154.html"&gt;Loop invariant code motion&lt;/a&gt; blog entry.&lt;/li&gt;
&lt;li&gt;Holger Krekel worked on updating the PyPy test suite to the latest version of py.test and also worked with me on the interminable bytearray changes for part of the sprint.&lt;/li&gt;
&lt;li&gt;No one was sure what  Maciej Fijałkowski worked on but he seemed to be quite busy.&lt;/li&gt;
&lt;/ul&gt;
I think that was most of the work done during the actual sprint. There was also a great deal of healthy discussion about the future of PyPy. Expect lots more interesting and exciting developments over the coming year.&lt;br&gt;
&lt;br&gt;</description><category>sprint</category><guid>https://www.pypy.org/posts/2011/02/pypy-winter-sprint-report-4155886720346408516.html</guid><pubDate>Mon, 14 Feb 2011 12:05:00 GMT</pubDate></item></channel></rss>