<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts about numpy)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/categories/numpy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Jul 2025 11:01:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>NumPy on PyPy - Status Update</title><link>https://www.pypy.org/posts/2014/04/numpy-on-pypy-status-update-1103134247318103282.html</link><dc:creator>Brian Kearns</dc:creator><description>&lt;p&gt;Work on NumPy on PyPy continued in March, though at a lighter pace than the previous few months. Progress was made on both compatibility and speed fronts. Several behavioral issues reported to the bug tracker were resolved. The most significant of these was probably the correction of casting to built-in Python types. Previously, int/long conversions of numpy scalars such as inf/nan/1e100 would return bogus results. Now, they raise or return values, as appropriate.&lt;br&gt;
&lt;br&gt;
On the speed front, enhancements to the PyPy JIT were made to support virtualizing the raw_store/raw_load memory operations used in numpy arrays. Further work remains here in virtualizing the alloc_raw_storage when possible. This will allow scalars to have storages but still be virtualized when possible in loops.&lt;br&gt;
&lt;br&gt;
Aside from continued work on compatibility/speed of existing code, we also hope to begin implementing the C-level components of other numpy modules such as mtrand, nditer, linalg, and so on. Several approaches could be taken to get C-level code in these modules working, ranging from reimplementing in RPython to interfacing with existing code with CFFI, if possible. The appropriate approach depends on many factors and will probably vary from module to module.&lt;br&gt;&lt;br&gt;To try out PyPy + NumPy, grab a &lt;a href="https://buildbot.pypy.org/nightly/trunk/"&gt;nightly PyPy&lt;/a&gt; and install our &lt;a href="https://bitbucket.org/pypy/numpy"&gt;NumPy fork&lt;/a&gt;. Feel free to report comments/issues to IRC, our mailing list, or bug tracker. Thanks to the contributors to the &lt;a href="https://pypy.org/numpydonate.html"&gt;NumPy on PyPy&lt;/a&gt; proposal for supporting this work.&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2014/04/numpy-on-pypy-status-update-1103134247318103282.html</guid><pubDate>Tue, 15 Apr 2014 20:08:00 GMT</pubDate></item><item><title>NumPy on PyPy - Progress in February</title><link>https://www.pypy.org/posts/2014/03/numpy-status-update-february-1245769841736493525.html</link><dc:creator>Brian Kearns</dc:creator><description>&lt;p&gt;More progress was made on the NumPy front in the past month. On the compatibility front, we now pass ~130 more tests from NumPy's suite since the end of January. Currently, we pass 2336 tests out of 3265 tests run, with many of the failures representing portions of NumPy that we don't plan to implement in the near future (object dtypes, unicode, etc). There are still some failures that do represent issues, such as special indexing cases and failures to respect subclassed ndarrays in return values, which we do plan to resolve. There are also some unimplemented components and ufuncs remaining which we hope to implement, such as nditer and mtrand. Overall, the most common array functionality should be working.&lt;br&gt;
&lt;br&gt;
Additionally, I began to take a look at some of the loops generated by our code. One widely used loop is dot, and we were running about 5x slower than NumPy's C version. I was able to optimize the dot loop and also the general array iterator to get us to ~1.5x NumPy C time on dot operations of various sizes. Further progress in this area could be made by using CFFI to tie into BLAS libraries, when available. Also, work remains in examining traces generated for our other loops and checking for potential optimizations.&lt;br&gt;
&lt;br&gt;
To try out PyPy + NumPy, grab a &lt;a href="https://buildbot.pypy.org/nightly/trunk/"&gt;nightly PyPy&lt;/a&gt; and install our &lt;a href="https://bitbucket.org/pypy/numpy"&gt;NumPy fork&lt;/a&gt;. Feel free to report comments/issues to IRC, our mailing list, or bug tracker. Thanks to the contributors to the &lt;a href="https://pypy.org/numpydonate.html"&gt;NumPy on PyPy&lt;/a&gt; proposal for supporting this work.&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
Brian&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2014/03/numpy-status-update-february-1245769841736493525.html</guid><pubDate>Fri, 07 Mar 2014 05:05:00 GMT</pubDate></item><item><title>NumPy Status Update - December/January</title><link>https://www.pypy.org/posts/2014/02/numpy-status-update-decemberjanuary-4292961614234099787.html</link><dc:creator>Brian Kearns</dc:creator><description>&lt;p&gt;Work continued on the NumPy + PyPy front steadily in December and more lightly in January. The continued focus was compatibility, targeting incorrect or unimplemented features that appeared in multiple NumPy test suite failures. We now pass ~2/3 of the NumPy test suite. The biggest improvements were made in these areas:&lt;br&gt;
&lt;br&gt;
- Bugs in conversions of arrays/scalars to/from native types&lt;br&gt;
- Fix cases where we would choose incorrect dtypes when initializing or computing results&lt;br&gt;
- Improve handling of subclasses of ndarray through computations&lt;br&gt;
- Support some optional arguments for array methods that are used in the pure-python part of NumPy&lt;br&gt;
- Support additional attributes in arrays, array.flags, and dtypes&lt;br&gt;
- Fix some indexing corner cases that arise in NumPy testing&lt;br&gt;
- Implemented part of numpy.fft (cffti and cfftf)&lt;br&gt;
&lt;br&gt;
Looking forward, we plan to continue improving the correctness of the existing implemented NumPy functionality, while also beginning to look at performance. The initial focus for performance will be to look at areas where we are significantly worse than CPython+NumPy. Those interested in trying these improvements out will need a &lt;a href="https://buildbot.pypy.org/nightly/trunk/"&gt;PyPy nightly&lt;/a&gt;, and an install of the &lt;a href="https://bitbucket.org/pypy/numpy"&gt;PyPy NumPy fork&lt;/a&gt;. Thanks again to the &lt;a href="https://pypy.org/numpydonate.html"&gt;NumPy on PyPy&lt;/a&gt; donors for funding this work.&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2014/02/numpy-status-update-decemberjanuary-4292961614234099787.html</guid><pubDate>Thu, 06 Feb 2014 19:06:00 GMT</pubDate></item><item><title>NumPy Status Update - November</title><link>https://www.pypy.org/posts/2013/12/numpy-status-update-november-364321959153372759.html</link><dc:creator>Brian Kearns</dc:creator><description>&lt;p&gt;Since the PyPy 2.2 release last month, more progress has been made on the NumPy compatibility front. Initial work has been directed by running the NumPy test suite and targeting failures that appear most frequently, along with fixing the few bugs reported on the bug tracker.&lt;br&gt;
&lt;br&gt;
Improvements were made in these areas:&lt;br&gt;
- Many missing/broken scalar functionalities were added/fixed. The scalar API should match up more closely with arrays now.&lt;br&gt;
- Some missing dtype functionality was added (newbyteorder, hasobject, descr, etc)&lt;br&gt;
- Support for optional arguments (axis, order) was added to some ndarray functions&lt;br&gt;
- Fixed some corner cases for string/record types&lt;br&gt;
&lt;br&gt;
Most of these improvements went onto trunk after 2.2 was split, so if you're interested in trying them out or running into problems on 2.2, try the
&lt;a href="https://buildbot.pypy.org/nightly/trunk/"&gt;nightly&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
Thanks again to the &lt;a href="https://pypy.org/numpydonate.html"&gt;NumPy on PyPy&lt;/a&gt; donors who make this continued progress possible.&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
Brian&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/12/numpy-status-update-november-364321959153372759.html</guid><pubDate>Mon, 09 Dec 2013 23:05:00 GMT</pubDate></item><item><title>PyPy Leysin Winter Sprint (11-19st January 2014)</title><link>https://www.pypy.org/posts/2013/11/pypy-leysin-winter-sprint-11-19st-8860782754173653661.html</link><dc:creator>Armin Rigo</dc:creator><description>&lt;p&gt;The next PyPy sprint will be in Leysin, Switzerland, for the ninth time.
This is a fully public sprint: newcomers and topics other than those
proposed below are welcome.&lt;/p&gt;
&lt;h3&gt;Goals and topics of the sprint&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Py3k: work towards supporting Python 3 in PyPy&lt;/li&gt;
&lt;li&gt;NumPyPy: work towards supporting the numpy module in PyPy&lt;/li&gt;
&lt;li&gt;STM: work towards supporting Software Transactional Memory&lt;/li&gt;
&lt;li&gt;And as usual, the main side goal is to have fun in winter sports :-)
We can take a day off for ski.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3&gt;Exact times&lt;/h3&gt;
&lt;p&gt;For a change, and as an attempt to simplify things, I specified the
dates as 11-19 January 2014, where 11 and 19 are travel days.  We will
work full days between the 12 and the 18.  You are of course allowed to
show up for a part of that time only, too.&lt;/p&gt;
&lt;h3&gt;Location &amp;amp; Accomodation&lt;/h3&gt;
&lt;p&gt;Leysin, Switzerland, "same place as before".  Let me refresh your
memory: both the sprint venue and the lodging will be in a very spacious
pair of chalets built specifically for bed &amp;amp; breakfast:
&lt;a class="reference external" href="https://www.ermina.ch/"&gt;https://www.ermina.ch/&lt;/a&gt;.  The place has a good ADSL Internet connexion
with wireless installed.  You can of course arrange your own lodging
anywhere (as long as you are in Leysin, you cannot be more than a 15
minutes walk away from the sprint venue), but I definitely recommend
lodging there too -- you won't find a better view anywhere else (though
you probably won't get much worse ones easily, either :-)&lt;/p&gt;
&lt;p&gt;Please &lt;em&gt;confirm&lt;/em&gt; that you are coming so that we can adjust the
reservations as appropriate.  The rate so far has been around 60 CHF a
night all included in 2-person rooms, with breakfast.  There are larger
rooms too (less expensive per person) and maybe the possibility to get a
single room if you really want to.&lt;/p&gt;
&lt;p&gt;Please register by Mercurial:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://bitbucket.org/pypy/extradoc/
https://foss.heptapod.net/pypy/extradoc/-/blob/branch/default/extradoc/sprintinfo/leysin-winter-2014
&lt;/pre&gt;
&lt;p&gt;or on the pypy-dev mailing list if you do not yet have check-in rights:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/pypy-dev"&gt;https://mail.python.org/mailman/listinfo/pypy-dev&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;You need a Swiss-to-(insert country here) power adapter.  There will be
some Swiss-to-EU adapters around -- bring a EU-format power strip if you
have one.&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/11/pypy-leysin-winter-sprint-11-19st-8860782754173653661.html</guid><pubDate>Sat, 30 Nov 2013 08:57:00 GMT</pubDate></item><item><title>NumPy status update</title><link>https://www.pypy.org/posts/2013/11/numpy-status-update-1609808546418002632.html</link><dc:creator>Romain Guillebert</dc:creator><description>&lt;span style="font-family: inherit;"&gt;Here is what has been happening with NumPy in PyPy in October thanks to the people who donated to the &lt;/span&gt;&lt;a href="https://pypy.org/numpydonate.html" style="font-family: inherit;" target="_blank"&gt;NumPyPy proposal&lt;/a&gt;&lt;span style="font-family: inherit;"&gt;:&lt;/span&gt;&lt;br&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br&gt;
&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;The biggest change is that we shifted to using an &lt;a href="https://bitbucket.org/pypy/numpy" target="_blank"&gt;external fork of numpy&lt;/a&gt; rather than a minimal numpypy module. The idea is that we will be able to &lt;/span&gt;reuse&lt;span style="font-family: inherit;"&gt; most of the upstream pure-python numpy components, replacing the C modules with appropriate RPython micronumpy pieces at the correct places in the module namespace.&lt;/span&gt;&lt;br&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br&gt;
&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;The numpy fork should work just as well as the old numpypy for functionality that existed previously, and also include much new functionality from the pure-python numpy pieces that simply hadn't been imported yet in numpypy. However, this new functionality will not have been "hand picked" to only include pieces that work, so you may run into functionality that relies on unimplemented components (which should fail with user-level exceptions).&lt;/span&gt;&lt;br&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br&gt;
&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;This setup also allows us to run the entire numpy test suite, which will help in directing future compatibility development. The recent PyPy release includes these changes, so download it and let us know how it works! And if you want to live on the edge, the nightly includes even more numpy progress made in November.&lt;/span&gt;&lt;br&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br&gt;
&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;To install the fork, download the latest release, and then install numpy eith&lt;/span&gt;er separately with a virtualenv: &lt;tt class="docutils literal"&gt;pip install git+https://bitbucket.org/pypy/numpy.git&lt;/tt&gt;; or directly: &lt;tt class="docutils literal"&gt;git clone https://bitbucket.org/pypy/numpy.git; cd numpy; pypy setup.py install&lt;/tt&gt;.&lt;br&gt;

&lt;br&gt;&lt;i&gt;&lt;b&gt;EDIT:&lt;/b&gt; if you install numpy as root, you may need to also import it once as root before it works: &lt;tt class="docutils literal"&gt;sudo pypy -c 'import numpy'&lt;/tt&gt;&lt;/i&gt;&lt;br&gt;

&lt;span style="font-family: inherit;"&gt;&lt;br&gt;
&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;Along with this change, progress was made in fixing internal micronumpy bugs and increasing compatibility:&lt;/span&gt;&lt;br&gt;
&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;Fixed a bug with strings in record dtypes&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;Fixed a bug wh&lt;/span&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;ere the multiplication of an ndarray with a Python int or float resulted in loss of the array's dtype&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;Fixed several segfaults encountered in the numpy test suite (suite should run now without segfaulting)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: white;"&gt;&lt;br&gt;
&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: white;"&gt;We also began working on __array_prepare__ and __array_wrap__, which are necessary pieces for a working matplotlib module.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: white;"&gt;&lt;br&gt;
&lt;/span&gt;&lt;/span&gt; Cheers,&lt;br&gt;
Romain and Brian</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/11/numpy-status-update-1609808546418002632.html</guid><pubDate>Fri, 15 Nov 2013 19:30:00 GMT</pubDate></item><item><title>Numpy Status Update</title><link>https://www.pypy.org/posts/2013/09/numpy-status-update-5160363918470470887.html</link><dc:creator>Romain Guillebert</dc:creator><description>&lt;p&gt;Hi everyone&lt;br&gt;
&lt;br&gt;
Thanks to the people who donated money to the &lt;a href="https://pypy.org/numpydonate.html" target="_blank"&gt;numpy proposal&lt;/a&gt;, here is what I've been working on recently :&lt;br&gt;
&lt;br&gt;
- Fixed conversion from a numpy complex number to a python complex number&lt;br&gt;
- Implement the rint ufunc&lt;br&gt;
- Make numpy.character usable as a dtype&lt;br&gt;
- Fix ndarray(dtype=str).fill()&lt;br&gt;
- Various fixes on boolean and fancy indexing&lt;br&gt;
&lt;br&gt;
Cheers&lt;br&gt;
Romain&lt;/p&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/09/numpy-status-update-5160363918470470887.html</guid><pubDate>Wed, 25 Sep 2013 17:49:00 GMT</pubDate></item><item><title>NumPy road forward</title><link>https://www.pypy.org/posts/2013/08/numpy-road-forward-4210065750776753500.html</link><dc:creator>Maciej Fijalkowski</dc:creator><description>&lt;div dir="ltr" style="text-align: left;"&gt;
&lt;p&gt;Hello everyone.&lt;/p&gt;
&lt;p&gt;This is the roadmap for numpy effort in PyPy as discussed on the London sprint.
First, the highest on our priority list is to finish the low-level part
of the numpy module. What
we'll do is to finish the RPython part of numpy and provide a pip installable
numpypy repository that includes the pure python part of Numpy. This would
contain the original Numpy with a few minor changes.&lt;/p&gt;
&lt;p&gt;Second, we need to work on the JIT support that will make NumPy on PyPy
faster. In detail:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reenable the lazy loop evaluation&lt;/li&gt;
&lt;li&gt;optimize bridges, which is depending on optimizer refactorings&lt;/li&gt;
&lt;li&gt;SSE support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the compatibility front, there were some independent attempts into
making the following stuff working:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;f2py&lt;/li&gt;
&lt;li&gt;C API (in fact, PyArray_* API is partly present in the nightly builds of
PyPy)&lt;/li&gt;
&lt;li&gt;matplotlib (both using PyArray_* API and embedding CPython runtime in PyPy)&lt;/li&gt;
&lt;li&gt;scipy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to make all of the above happen faster, it would be helpful to raise
more funds. You can donate to &lt;a class="reference external" href="https://pypy.org/numpydonate.html"&gt;PyPy's NumPy project&lt;/a&gt; on our website. Note
that PyPy is a member of SFC which is a 501(c)(3) US non-profit, so donations
from US companies can be tax-deducted.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;
fijal, arigo, ronan, rguillebert, anto and others&lt;/p&gt;
&lt;br&gt;&lt;/div&gt;</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/08/numpy-road-forward-4210065750776753500.html</guid><pubDate>Tue, 27 Aug 2013 11:20:00 GMT</pubDate></item><item><title>NumPyPy Status Update</title><link>https://www.pypy.org/posts/2013/08/numpypy-status-update-3401163348519734658.html</link><dc:creator>Romain Guillebert</dc:creator><description>&lt;p&gt;Hello everyone&lt;br&gt;
&lt;br&gt;
As expected, nditer is a lot of work. I'm going to pause my work on it for now and focus on simpler and more important things, here is a list of what I implemented :&lt;br&gt;
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Fixed a bug on 32 bit that made int32(123).dtype == dtype("int32") fail&lt;/li&gt;
&lt;li&gt;Fixed a bug on the pickling of array slices&lt;/li&gt;
&lt;li&gt;The external loop flag is implemented on the nditer class&lt;/li&gt;
&lt;li&gt;The c_index, f_index and multi_index flags are also implemented&lt;/li&gt;
&lt;li&gt;Add dtype("double") and dtype("str")&lt;/li&gt;
&lt;li&gt;C-style iteration is available for nditer&lt;/li&gt;
&lt;/ul&gt;
Cheers&lt;br&gt;
Romain Guillebert</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/08/numpypy-status-update-3401163348519734658.html</guid><pubDate>Thu, 08 Aug 2013 19:01:00 GMT</pubDate></item><item><title>NumPyPy status update</title><link>https://www.pypy.org/posts/2013/06/numpypy-status-update-3846626188716521472.html</link><dc:creator>Romain Guillebert</dc:creator><description>&lt;p&gt;Hello everyone,&lt;br&gt;
&lt;br&gt;
May was the first month I was paid to work on NumPyPy (thanks to all who donated!), here is what I worked on during this period :&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;It is now possible to use subarrays.&lt;/li&gt;
&lt;li&gt;It is now possible to pickle ndarrays (including those using subarrays), dtypes and scalars, the pickling protocol is the same as numpy's.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;div&gt;
For June, I plan to work on the nditer class, it seems that there's enough work for an entire month.&lt;/div&gt;
&lt;br&gt;
Cheers&lt;br&gt;
Romain Guillebert</description><category>numpy</category><guid>https://www.pypy.org/posts/2013/06/numpypy-status-update-3846626188716521472.html</guid><pubDate>Mon, 03 Jun 2013 14:09:00 GMT</pubDate></item></channel></rss>