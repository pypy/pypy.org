<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts about performance)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/categories/performance.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2025 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Jul 2025 11:01:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>RPython-based emulator speeds up RISC-V simulation over 15x</title><link>https://www.pypy.org/posts/2023/05/rpython-used-to-speed-up-risc-v-simulation-over-15x.html</link><dc:creator>CF Bolz-Tereick</dc:creator><description>&lt;p&gt;In cooperation with &lt;a class="reference external" href="https://riscv.org/"&gt;RISC-V International&lt;/a&gt;, who funded a part of this project,
we recently created a workflow to
use RPython to take a &lt;a class="reference external" href="https://github.com/riscv/sail-riscv#riscv-sail-model"&gt;Sail RISC-V&lt;/a&gt; model and automatically create a RISC-V ISA
emulator from it, which we call &lt;a class="reference external" href="https://docs.pydrofoil.org"&gt;Pydrofoil&lt;/a&gt;. The simulator sped up booting a
linux emulator from 35 minutes (using the standard Sail-generated emulator in
C) to 2 minutes, a speedup of 17.5x. More details about the process are in the
&lt;a class="reference external" href="https://riscv.org/blog/2023/05/how-to-speed-up-the-emulating-process-with-pydrofoil-carl-friedrich/"&gt;RISC-V blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few take-aways from the project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;While PyPy has shown it can speed up generic python code &lt;a class="reference external" href="https://speed.pypy.org"&gt;about 4x&lt;/a&gt;, the
technology behind PyPy can really shine in other areas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RPython is malleable and can be molded to many tasks, the RPython meta-JIT is
very flexible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A JIT is well-suited for the problem of emulation, because it can
perform dynamic binary translation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy can solve real world performance problems, even somewhat unusual ones.
Please &lt;a class="reference external" href="https://www.pypy.org/pypy-sponsors.html"&gt;get in touch&lt;/a&gt; and let us know how we can help you solve yours!&lt;/p&gt;</description><category>casestudy</category><category>performance</category><guid>https://www.pypy.org/posts/2023/05/rpython-used-to-speed-up-risc-v-simulation-over-15x.html</guid><pubDate>Tue, 16 May 2023 11:22:35 GMT</pubDate></item><item><title>Repeated string concatenation is quadratic in PyPy (and CPython)</title><link>https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html</link><dc:creator>CF Bolz-Tereick</dc:creator><description>&lt;p&gt;This is a super brief blog post responding to an &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues/3885"&gt;issue&lt;/a&gt; that we got on the PyPy
issue tracker. I am moving my response to the blog (with permission of the
submitter) to have a post to point to, since it's a problem that comes up with
some regularity. It's also documented on our page of &lt;a class="reference external" href="https://doc.pypy.org/en/latest/cpython_differences.html?highlight=join#performance-differences"&gt;differences between PyPy
and CPython&lt;/a&gt; but I thought an additional blog post might be good.&lt;/p&gt;
&lt;p&gt;The issue pointed out that a small program that operates on strings is much
slower on PyPy compared to CPython. The program is a solution for 2016's
Advent of Code &lt;a class="reference external" href="https://adventofcode.com/2016/day/16"&gt;Day 16&lt;/a&gt; and looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-1" name="rest_code_a26012bc0450445085ac0db1f85e0c61-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dragon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-2" name="rest_code_a26012bc0450445085ac0db1f85e0c61-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-3" name="rest_code_a26012bc0450445085ac0db1f85e0c61-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-4" name="rest_code_a26012bc0450445085ac0db1f85e0c61-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-5" name="rest_code_a26012bc0450445085ac0db1f85e0c61-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-6" name="rest_code_a26012bc0450445085ac0db1f85e0c61-6" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-7" name="rest_code_a26012bc0450445085ac0db1f85e0c61-7" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-8" name="rest_code_a26012bc0450445085ac0db1f85e0c61-8" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-9" name="rest_code_a26012bc0450445085ac0db1f85e0c61-9" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-10" name="rest_code_a26012bc0450445085ac0db1f85e0c61-10" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-11" name="rest_code_a26012bc0450445085ac0db1f85e0c61-11" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;iterdiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-12" name="rest_code_a26012bc0450445085ac0db1f85e0c61-12" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-13" name="rest_code_a26012bc0450445085ac0db1f85e0c61-13" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-14" name="rest_code_a26012bc0450445085ac0db1f85e0c61-14" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-15" name="rest_code_a26012bc0450445085ac0db1f85e0c61-15" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-16" name="rest_code_a26012bc0450445085ac0db1f85e0c61-16" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-17" name="rest_code_a26012bc0450445085ac0db1f85e0c61-17" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35651584&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-18" name="rest_code_a26012bc0450445085ac0db1f85e0c61-18" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-18"&gt;&lt;/a&gt;&lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'10010000000110000'&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-19" name="rest_code_a26012bc0450445085ac0db1f85e0c61-19" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-20" name="rest_code_a26012bc0450445085ac0db1f85e0c61-20" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dragon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-21" name="rest_code_a26012bc0450445085ac0db1f85e0c61-21" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-21"&gt;&lt;/a&gt;&lt;span class="n"&gt;initstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_a26012bc0450445085ac0db1f85e0c61-22" name="rest_code_a26012bc0450445085ac0db1f85e0c61-22" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a26012bc0450445085ac0db1f85e0c61-22"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterdiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initstate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The submitter pointed out, that the program is fast on CPython (~8s on my
laptop) and slow (didn't finish) on PyPy.&lt;/p&gt;
&lt;p&gt;The reason for the performance difference is that &lt;code class="docutils literal"&gt;+=&lt;/code&gt; on strings in a loop
has quadratic complexity in PyPy, which is what &lt;code class="docutils literal"&gt;diffstr&lt;/code&gt; does. To see the
quadraticness, consider that to add a character at the end of the string, the
beginning of the string needs to be copied into a new chunk of memory. If the
loop runs &lt;code class="docutils literal"&gt;n&lt;/code&gt; times, that means there are&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;1 + 2 + 3 + ... + n = n * (n + 1) // 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;character copies.&lt;/p&gt;
&lt;p&gt;Repeated string concatenations are in principle also quadratic in CPython, but
CPython has an &lt;a class="reference external" href="https://docs.python.org/2/whatsnew/2.4.html#optimizations"&gt;optimization&lt;/a&gt; that makes them sometimes not quadratic, which is
what makes this program not too slow in CPython.&lt;/p&gt;
&lt;p&gt;In order to fix the problem on PyPy it's best to use a list for the string
parts, which has the right amortized O(1) complexity for &lt;code class="docutils literal"&gt;.append&lt;/code&gt; calls, and
then use &lt;code class="docutils literal"&gt;str.join&lt;/code&gt; after the loop:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ff8b6bb92a4848a9980069f285b9ef08-1" name="rest_code_ff8b6bb92a4848a9980069f285b9ef08-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_ff8b6bb92a4848a9980069f285b9ef08-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_ff8b6bb92a4848a9980069f285b9ef08-2" name="rest_code_ff8b6bb92a4848a9980069f285b9ef08-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_ff8b6bb92a4848a9980069f285b9ef08-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a id="rest_code_ff8b6bb92a4848a9980069f285b9ef08-3" name="rest_code_ff8b6bb92a4848a9980069f285b9ef08-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_ff8b6bb92a4848a9980069f285b9ef08-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_ff8b6bb92a4848a9980069f285b9ef08-4" name="rest_code_ff8b6bb92a4848a9980069f285b9ef08-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_ff8b6bb92a4848a9980069f285b9ef08-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;a id="rest_code_ff8b6bb92a4848a9980069f285b9ef08-5" name="rest_code_ff8b6bb92a4848a9980069f285b9ef08-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_ff8b6bb92a4848a9980069f285b9ef08-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this change the program becomes a little bit faster on CPython for me, and
on PyPy it stops being quadratic and runs in ~3.5s.&lt;/p&gt;
&lt;p&gt;In general, it's best not to rely on the presence of this optimization in
CPython either. Sometimes, a small innocent looking changes will break CPython's
optimization. E.g. this useless change makes CPython also take ages:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-1" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-1" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;diffstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-2" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-2" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-3" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-3" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-4" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-4" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-5" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-5" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;a id="rest_code_a25cc3edb1e9484bb91a834e66068ae3-6" name="rest_code_a25cc3edb1e9484bb91a834e66068ae3-6" href="https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html#rest_code_a25cc3edb1e9484bb91a834e66068ae3-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why this change breaks the optimization in CPython is that it only
triggers if the reference count of &lt;code class="docutils literal"&gt;b&lt;/code&gt; is 1, in which case it uses &lt;code class="docutils literal"&gt;realloc&lt;/code&gt;
on the string. The change is unrealistic of course, but you could imagine a
related that keeps an extra reference to &lt;code class="docutils literal"&gt;b&lt;/code&gt; for a sensible reason.&lt;/p&gt;
&lt;p&gt;Another situation in which the optimization doesn't work is discussed in this
&lt;a class="reference external" href="https://stackoverflow.com/a/44487738"&gt;StackOverflow question&lt;/a&gt; with an answer by Tim Peters.&lt;/p&gt;
&lt;p&gt;It's unlikely that PyPy will fix this. We had a prototype how to do it, but it
seems very little "production" code uses &lt;cite&gt;+=&lt;/cite&gt; on strings in a loop, and the fix
makes the strings implementation quite a bit more complex.&lt;/p&gt;
&lt;p&gt;So, in summary, don't use repeated concatenations in a loop!&lt;/p&gt;</description><category>performance</category><guid>https://www.pypy.org/posts/2023/01/string-concatenation-quadratic.html</guid><pubDate>Wed, 04 Jan 2023 09:00:00 GMT</pubDate></item></channel></rss>