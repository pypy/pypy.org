<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts by Philip Jenvey)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/authors/philip-jenvey.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Jul 2025 11:01:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PyPy3.3 v5.2 alpha 1 released</title><link>https://www.pypy.org/posts/2016/05/pypy33-v52-alpha-1-released-1725927506363370346.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;We're pleased to announce the first alpha release of PyPy3.3 v5.2. This is the&lt;br&gt;
first release of PyPy which targets Python 3.3 (3.3.5) compatibility.&lt;/p&gt;&lt;p&gt;We would like to thank all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;&lt;br&gt;
for supporting the work that went into this and future releases.&lt;/p&gt;&lt;p&gt;You can download the PyPy3.3 v5.2 alpha 1 release here:&lt;/p&gt;&lt;blockquote&gt;&lt;a class="reference external" href="https://pypy.org/download.html#python-3-3-5-compatible-pypy3-3-v5-2"&gt;https://pypy.org/download.html#python-3-3-5-compatible-pypy3-3-v5-2&lt;/a&gt;&lt;/blockquote&gt;&lt;div class="section" id="highlights"&gt;&lt;h1&gt;Highlights&lt;/h1&gt;&lt;ul class="simple"&gt;&lt;li&gt;Python 3.3.5 support!&lt;ul&gt;&lt;li&gt;Being an early alpha release, there are some &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues?status=new&amp;amp;status=open&amp;amp;component=PyPy3+%28running+Python+3.x%29&amp;amp;kind=enhancement"&gt;missing features&lt;/a&gt; such as a&lt;br&gt;
&lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues/2309/optimized-unicode-representation"&gt;PEP 393-like space efficient string representation&lt;/a&gt; and &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues?status=new&amp;amp;status=open&amp;amp;component=PyPy3%20%28running%20Python%203.x%29"&gt;known issues&lt;/a&gt;&lt;br&gt;
including performance issues (e.g. issue &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues/2305"&gt;#2305&lt;/a&gt;). The focus for this&lt;br&gt;
release has been updating to 3.3 compatibility. Windows is also not yet&lt;br&gt;
supported.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip"&gt;ensurepip&lt;/a&gt; is also included (it's only included in CPython 3 &amp;gt;= 3.4).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="what-is-pypy"&gt;&lt;h1&gt;What is PyPy?&lt;/h1&gt;&lt;p&gt;PyPy is a very compliant Python interpreter, almost a drop-in replacement for&lt;br&gt;
CPython 2.7.10 and one day 3.3.5. It's fast due to its integrated tracing JIT&lt;br&gt;
compiler.&lt;/p&gt;&lt;p&gt;We also welcome developers of other &lt;a class="reference external" href="https://pypyjs.org"&gt;dynamic languages&lt;/a&gt; to see what RPython&lt;br&gt;
can do for them.&lt;/p&gt;&lt;p&gt;This release supports:&lt;/p&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt; machines on most common operating systems except Windows&lt;br&gt;
(Linux 32/64, Mac OS X 64, OpenBSD, FreeBSD),&lt;/li&gt;
&lt;li&gt;newer &lt;strong&gt;ARM&lt;/strong&gt; hardware (ARMv6 or ARMv7, with VFPv3) running Linux,&lt;/li&gt;
&lt;li&gt;big- and little-endian variants of &lt;strong&gt;PPC64&lt;/strong&gt; running Linux,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s390x&lt;/strong&gt; running Linux&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Please try it out and let us know what you think. We welcome feedback, we know&lt;br&gt;
you are using PyPy, please tell us about it!&lt;/p&gt;&lt;p&gt;We'd especially like to thank these people for their contributions to this&lt;br&gt;
release:&lt;/p&gt;&lt;p&gt;Manuel Jacob, Ronan Lamy, Mark Young, Amaury Forgeot d'Arc, Philip Jenvey,&lt;br&gt;
Martin Matusiak, Vasily Kuznetsov, Matti Picus, Armin Rigo and many others.&lt;/p&gt;&lt;p&gt;Cheers&lt;/p&gt;&lt;p&gt;The PyPy Team&lt;/p&gt;&lt;/div&gt;</description><category>release</category><guid>https://www.pypy.org/posts/2016/05/pypy33-v52-alpha-1-released-1725927506363370346.html</guid><pubDate>Mon, 30 May 2016 22:53:00 GMT</pubDate></item><item><title>PyPy3 2.4.0 released</title><link>https://www.pypy.org/posts/2014/10/pypy3-240-released-5007750685927360190.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;div dir="ltr" style="text-align: left;"&gt;We're pleased to announce the availability of PyPy3 2.4.0!&lt;br&gt;
&lt;br&gt;
This release contains several bugfixes and enhancements. Among the user-facing improvements specific to PyPy3:&lt;br&gt;
&lt;ul&gt;&lt;li&gt;Better Windows compatibility, e.g. the nt module functions _getfinalpathname &amp;amp; _getfileinformation are now supported (the former is required for the popular pathlib library for example)&lt;/li&gt;
&lt;li&gt;Various fsencode PEP 383 related fixes to the posix module (readlink, uname, ttyname and ctermid) and improved locale handling&lt;/li&gt;
&lt;li&gt;Switched the default binary name on POSIX distributions from 'pypy' to 'pypy3' (which symlinks to to 'pypy3.2')&lt;/li&gt;
&lt;li&gt;Fixed a couple different crashes related to parsing Python 3 source code&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
And improvements shared with the recent PyPy 2.4.0 release:&lt;br&gt;
&lt;ul style="text-align: left;"&gt;&lt;li&gt;internal refactoring in string and GIL handling which led to significant speedups&lt;/li&gt;
&lt;li&gt;improved handling of multiple objects (like sockets) in long-running  programs. They are collected and released more efficiently, reducing  memory use. In simpler terms - we closed what looked like a memory leak&lt;/li&gt;
&lt;li&gt;Windows builds now link statically to zlib, expat, bzip, and openssl-1.0.1i&lt;/li&gt;
&lt;li&gt;Many issues were &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/issues?status=resolved"&gt;resolved&lt;/a&gt; since the 2.3.1 release in June&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
You can download PyPy3 2.4.0 here &lt;a href="https://pypy.org/download.html"&gt;https://pypy.org/download.html.&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt; is a very compliant Python interpreter, almost a drop-in replacement for &lt;a href="https://www.python.org/"&gt;CPython&lt;/a&gt; 2.7 and 3.2.5. It's fast (&lt;a href="https://speed.pypy.org/"&gt;pypy 2.4 and cpython 2.7.x performance comparison&lt;/a&gt;) due to its integrated tracing JIT compiler.&lt;br&gt;
&lt;br&gt;
This  release supports x86 machines running Linux 32/64, Mac OS X 64,   Windows, and OpenBSD, as well as newer ARM hardware (ARMv6 or ARMv7,   with VFPv3) running Linux.  &lt;br&gt;
We would like to thank our donors for the continued support of the PyPy project.&lt;br&gt;
&lt;br&gt;
The complete release notice is &lt;a href="https://doc.pypy.org/en/latest/release-pypy3-2.4.0.html"&gt;here.&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
Please  try it out and let us know what you think. We especially welcome  success stories, please tell us about how it has helped you!&lt;br&gt;
&lt;br&gt;
Cheers, The PyPy Team&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;</description><category>release</category><guid>https://www.pypy.org/posts/2014/10/pypy3-240-released-5007750685927360190.html</guid><pubDate>Tue, 21 Oct 2014 18:02:00 GMT</pubDate></item><item><title>PyPy3 2.3.1 - Fulcrum</title><link>https://www.pypy.org/posts/2014/06/pypy3-231-fulcrum-3765964217640322884.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;We're pleased to announce the first stable release of PyPy3. PyPy3&lt;br&gt;
targets Python 3 (3.2.5) compatibility.&lt;/p&gt;&lt;p&gt;We would like to thank all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;&lt;br&gt;
for supporting the work that went into this.&lt;/p&gt;&lt;p&gt;You can download the PyPy3 2.3.1 release here:&lt;/p&gt;&lt;blockquote&gt;&lt;a class="reference external" href="https://pypy.org/download.html#pypy3-2-3-1"&gt;https://pypy.org/download.html#pypy3-2-3-1&lt;/a&gt;&lt;/blockquote&gt;&lt;div class="section" id="highlights"&gt;&lt;h1&gt;Highlights&lt;/h1&gt;&lt;ul class="simple"&gt;&lt;li&gt;The first stable release of PyPy3: support for Python 3!&lt;/li&gt;
&lt;li&gt;The stdlib has been updated to Python 3.2.5&lt;/li&gt;
&lt;li&gt;Additional support for the u'unicode' syntax (&lt;a class="reference external" href="https://legacy.python.org/dev/peps/pep-0414/"&gt;PEP 414&lt;/a&gt;) from Python 3.3&lt;/li&gt;
&lt;li&gt;Updates from the default branch, such as incremental GC and various JIT&lt;br&gt;
improvements&lt;/li&gt;
&lt;li&gt;Resolved some notable JIT performance regressions from PyPy2:&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;Re-enabled the previously disabled collection (list/dict/set) strategies&lt;/li&gt;
&lt;li&gt;Resolved performance of iteration over range objects&lt;/li&gt;
&lt;li&gt;Resolved handling of Python 3's exception __context__ unnecessarily forcing&lt;br&gt;
frame object overhead&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div class="section" id="what-is-pypy"&gt;&lt;h1&gt;What is PyPy?&lt;/h1&gt;&lt;p&gt;PyPy is a very compliant Python interpreter, almost a drop-in replacement for&lt;br&gt;
CPython 2.7.6 or 3.2.5. It's fast due to its integrated tracing JIT compiler.&lt;/p&gt;&lt;p&gt;This release supports x86 machines running Linux 32/64, Mac OS X 64, Windows,&lt;br&gt;
and OpenBSD,&lt;br&gt;
as well as newer ARM hardware (ARMv6 or ARMv7, with VFPv3) running Linux.&lt;/p&gt;&lt;p&gt;While we support 32 bit python on Windows, work on the native Windows 64&lt;br&gt;
bit python is still stalling, we would welcome a volunteer&lt;br&gt;
to &lt;a class="reference external" href="https://doc.pypy.org/en/latest/windows.html#what-is-missing-for-a-full-64-bit-translation"&gt;handle that&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class="section" id="how-to-use-pypy"&gt;&lt;h1&gt;How to use PyPy?&lt;/h1&gt;&lt;p&gt;We suggest using PyPy from a &lt;a class="reference external" href="https://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;. Once you have a virtualenv&lt;br&gt;
installed, you can follow instructions from &lt;a class="reference external" href="https://doc.pypy.org/en/latest/getting-started.html#installing-using-virtualenv"&gt;pypy documentation&lt;/a&gt; on how&lt;br&gt;
to proceed. This document also covers other &lt;a class="reference external" href="https://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;installation schemes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Cheers,&lt;br&gt;
the PyPy team&lt;/p&gt;&lt;/div&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2014/06/pypy3-231-fulcrum-3765964217640322884.html</guid><pubDate>Fri, 20 Jun 2014 21:31:00 GMT</pubDate></item><item><title>Py3k status update #13</title><link>https://www.pypy.org/posts/2014/02/py3k-status-update-13-4630607029125647100.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the 13th status update about our work on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22py3k%22%29"&gt;py3k branch&lt;/a&gt;, which we&lt;br&gt;
can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We're just finishing up a cleanup of int/long types. This work helps the py3k&lt;br&gt;
branch unify these types into the Python 3 int and restore &lt;a class="reference external" href="https://www.pypy.org/posts/2013/11/py3k-status-update-12-5307085693947812769.html"&gt;JIT compilation of&lt;br&gt;
machine sized integers&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This cleanup also removes &lt;a class="reference external" href="https://doc.pypy.org/en/latest/objspace.html#multimethods"&gt;multimethods&lt;/a&gt; from these types. PyPy has&lt;br&gt;
historically used a clever implementation of multimethod dispatch for declaring&lt;br&gt;
methods of the __builtin__ types in RPython.&lt;/p&gt;&lt;p&gt;This multimethod scheme provides some convenient features for doing this,&lt;br&gt;
however we've come to the conclusion that it may be more trouble than it's&lt;br&gt;
worth. A major problem of multimethods is that they generate a large amount of&lt;br&gt;
stub methods which burden the already lengthy and memory hungry RPython&lt;br&gt;
translation process. Also, their implementation and behavior can be somewhat&lt;br&gt;
complicated/obscure.&lt;/p&gt;&lt;p&gt;The alternative to multimethods involves doing the work of the type checking&lt;br&gt;
and dispatching rules in a more verbose, manual way. It's a little more work in&lt;br&gt;
the end but less magical.&lt;/p&gt;&lt;p&gt;Recently, Manuel Jacob finished a large cleanup effort of the&lt;br&gt;
unicode/string/bytearray types that also removed their multimethods. This work&lt;br&gt;
also benefits the py3k branch: it'll help with future &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0393/"&gt;PEP 393&lt;/a&gt; (or &lt;a class="reference external" href="https://lucumr.pocoo.org/2014/1/9/ucs-vs-utf8/"&gt;PEP 393&lt;br&gt;
alternative&lt;/a&gt;) work. This effort was partly sponsored by Google's Summer of&lt;br&gt;
Code: thanks Manuel and Google!&lt;/p&gt;&lt;p&gt;Now there's only a couple major pieces left in the multimethod removal (the&lt;br&gt;
float/complex types and special marshaling code) and a few minor pieces that&lt;br&gt;
should be relatively easy.&lt;/p&gt;&lt;p&gt;In conclusion, there's been some good progress made on py3k and multimethod&lt;br&gt;
removal this winter, albeit a bit slower than we would have liked.&lt;/p&gt;&lt;p&gt;cheers,&lt;br&gt;
Phil&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2014/02/py3k-status-update-13-4630607029125647100.html</guid><pubDate>Tue, 18 Feb 2014 02:33:00 GMT</pubDate></item><item><title>Py3k status update #12</title><link>https://www.pypy.org/posts/2013/11/py3k-status-update-12-5307085693947812769.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the 12th status update about our work on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22py3k%22%29"&gt;py3k branch&lt;/a&gt;, which we&lt;br&gt;
can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here's an update on the recent progress:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;Thank you to everyone who has provided initial feedback on the PyPy3 2.1 beta&lt;br&gt;
1 release. We've gotten a number of bug reports, most of which have been&lt;br&gt;
fixed.&lt;/li&gt;
&lt;li&gt;As usual, we're continually keeping up with changes from the default&lt;br&gt;
branch. Oftentimes these merges come at a cost (conflicts and or&lt;br&gt;
reintegration of py3k changes) but occasionally we get goodies for free, such&lt;br&gt;
as the &lt;a class="reference external" href="https://www.pypy.org/posts/2013/10/making-coveragepy-faster-under-pypy-935409618297062344.html"&gt;recent JIT optimizations&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/posts/2013/10/incremental-garbage-collector-in-pypy-8956893523842234676.html"&gt;incremental garbage collection&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've been focusing on re-optimizing Python 2 int sized (machine sized)&lt;br&gt;
integers:&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We have a couple of known, notable speed regressions in the PyPy3 beta release&lt;br&gt;
vs regular PyPy. The major one being with Python 2.x int sized (or machine&lt;br&gt;
sized) integers.&lt;/p&gt;&lt;p&gt;Python 3 drops the distinction between int and long types. CPython 3.x&lt;br&gt;
accomplishes this by removing the old int type entirely and renaming the long&lt;br&gt;
type to int. Initially, we've done the same for PyPy3 for the sake of&lt;br&gt;
simplicity and getting everything working.&lt;/p&gt;&lt;p&gt;However PyPy's JIT is capable of heavily optimizing these machine sized integer&lt;br&gt;
operations, so this came with a regression in performance in this area.&lt;/p&gt;&lt;p&gt;We're now in the process of solving this. Part of this work also involves some&lt;br&gt;
house cleaning on these numeric types which also benefits the default branch.&lt;/p&gt;&lt;p&gt;cheers,&lt;br&gt;
Phil&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2013/11/py3k-status-update-12-5307085693947812769.html</guid><pubDate>Tue, 12 Nov 2013 23:16:00 GMT</pubDate></item><item><title>PyPy3 2.1 beta 1</title><link>https://www.pypy.org/posts/2013/07/pypy3-21-beta-1-8647445024868663902.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;We're pleased to announce the first beta of the upcoming 2.1 release of&lt;br&gt;
PyPy3. This is the first release of PyPy which targets Python 3 (3.2.3)&lt;br&gt;
compatibility.&lt;/p&gt;&lt;p&gt;We would like to thank all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;&lt;br&gt;
for supporting the work that went into this and future releases.&lt;/p&gt;&lt;p&gt;You can download the PyPy3 2.1 beta 1 release here:&lt;/p&gt;&lt;blockquote&gt;&lt;a class="reference external" href="https://pypy.org/download.html#pypy3-2-1-beta-1"&gt;https://pypy.org/download.html#pypy3-2-1-beta-1&lt;/a&gt;&lt;/blockquote&gt;&lt;div class="section" id="highlights"&gt;&lt;h1&gt;Highlights&lt;/h1&gt;&lt;ul class="simple"&gt;&lt;li&gt;The first release of PyPy3: support for Python 3, targetting CPython 3.2.3!&lt;ul&gt;&lt;li&gt;There are some &lt;a class="reference external" href="https://bugs.pypy.org/issue?%40search_text=&amp;amp;title=py3k&amp;amp;%40columns=title&amp;amp;keyword=&amp;amp;id=&amp;amp;%40columns=id&amp;amp;creation=&amp;amp;creator=&amp;amp;release=&amp;amp;activity=&amp;amp;%40columns=activity&amp;amp;%40sort=activity&amp;amp;actor=&amp;amp;priority=&amp;amp;%40group=priority&amp;amp;status=-1%2C1%2C2%2C3%2C4%2C5%2C6&amp;amp;%40columns=status&amp;amp;assignedto=&amp;amp;%40columns=assignedto&amp;amp;%40pagesize=50&amp;amp;%40startwith=0&amp;amp;%40queryname=&amp;amp;%40old-queryname=&amp;amp;%40action=search"&gt;known issues&lt;/a&gt; including performance regressions (issues&lt;br&gt;
&lt;a class="reference external" href="https://bugs.pypy.org/issue1540"&gt;#1540&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="https://bugs.pypy.org/issue1541"&gt;#1541&lt;/a&gt;) slated to be resolved before the final release.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="what-is-pypy"&gt;&lt;h1&gt;What is PyPy?&lt;/h1&gt;&lt;p&gt;PyPy is a very compliant Python interpreter, almost a drop-in replacement for&lt;br&gt;
CPython 2.7.3 or 3.2.3. It's fast due to its integrated tracing JIT compiler.&lt;/p&gt;&lt;p&gt;This release supports x86 machines running Linux 32/64, Mac OS X 64 or Windows&lt;br&gt;
32. Also this release supports ARM machines running Linux 32bit - anything with&lt;br&gt;
&lt;tt class="docutils literal"&gt;ARMv6&lt;/tt&gt; (like the Raspberry Pi) or &lt;tt class="docutils literal"&gt;ARMv7&lt;/tt&gt; (like Beagleboard,&lt;br&gt;
Chromebook, Cubieboard, etc.) that supports &lt;tt class="docutils literal"&gt;VFPv3&lt;/tt&gt; should work.&lt;/p&gt;&lt;p&gt;Windows 64 work is still stalling and we would welcome a volunteer to handle&lt;br&gt;
that.&lt;/p&gt;&lt;/div&gt;&lt;div class="section" id="how-to-use-pypy"&gt;&lt;h1&gt;How to use PyPy?&lt;/h1&gt;&lt;p&gt;We suggest using PyPy from a &lt;a class="reference external" href="https://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;. Once you have a virtualenv&lt;br&gt;
installed, you can follow instructions from &lt;a class="reference external" href="https://doc.pypy.org/en/latest/getting-started.html#installing-using-virtualenv"&gt;pypy documentation&lt;/a&gt; on how&lt;br&gt;
to proceed. This document also covers other &lt;a class="reference external" href="https://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;installation schemes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Cheers,&lt;br&gt;
the PyPy team&lt;/p&gt;&lt;/div&gt;</description><guid>https://www.pypy.org/posts/2013/07/pypy3-21-beta-1-8647445024868663902.html</guid><pubDate>Tue, 30 Jul 2013 21:35:00 GMT</pubDate></item><item><title>Py3k status update #11</title><link>https://www.pypy.org/posts/2013/06/py3k-status-update-11-133025715908408072.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the 11th status update about our work on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22py3k%22%29"&gt;py3k branch&lt;/a&gt;, which we&lt;br&gt;
can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here's some highlights of the progress made since the previous update:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;PyPy py3k now matches CPython 3's hash code for&lt;br&gt;
int/float/complex/Decimal/Fraction&lt;/li&gt;
&lt;li&gt;Various outstanding unicode identifier related issues were&lt;br&gt;
resolved. E.g. test_importlib/pep263/ucn/unicode all now fully pass. Various&lt;br&gt;
usage of identifiers (in particular type and module names) have been fixed to&lt;br&gt;
handle non-ascii names -- mostly around display of reprs and exception&lt;br&gt;
messages.&lt;/li&gt;
&lt;li&gt;The unicodedata database has been upgraded to 6.0.0.&lt;/li&gt;
&lt;li&gt;Windows support has greatly improved, though it could still use some more&lt;br&gt;
help (but so does the default branch to a certain degree).&lt;/li&gt;
&lt;li&gt;Probably the last of the parsing related bugs/features have been taken care&lt;br&gt;
of.&lt;/li&gt;
&lt;li&gt;Of course various other smaller miscellaneous fixes&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This leaves the branch w/ only about 5 outstanding failures of the stdlib test&lt;br&gt;
suite:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p class="first"&gt;test_float&lt;/p&gt;&lt;p&gt;1 failing test about containment of floats in collections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;test_memoryview&lt;/p&gt;&lt;p&gt;Various failures: requires some bytes/str changes among other things (Manuel&lt;br&gt;
Jacob's has some progress on this on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/compare/py3k-memoryview..py3k"&gt;py3k-memoryview branch&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;test_multiprocessing&lt;/p&gt;&lt;p&gt;1 or more tests deadlock on some platforms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;test_sys and test_threading&lt;/p&gt;&lt;p&gt;2 failing tests for the New GIL's new API&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Probably the biggest feature left to tackle is the New GIL.&lt;/p&gt;&lt;p&gt;We're now pretty close to pushing an initial release. We had planned for one&lt;br&gt;
around PyCon, but having missed that we've put some more effort into the branch&lt;br&gt;
to provide a more fully-fledged initial release.&lt;/p&gt;&lt;p&gt;Thanks to the following for their contributions: Manuel Jacob, Amaury Forgeot&lt;br&gt;
d'Arc, Karl Ramm, Jason Chu and Christian Hudon.&lt;/p&gt;&lt;p&gt;cheers,&lt;br&gt;
Phil&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2013/06/py3k-status-update-11-133025715908408072.html</guid><pubDate>Wed, 12 Jun 2013 19:17:00 GMT</pubDate></item><item><title>Py3k status update #10</title><link>https://www.pypy.org/posts/2013/03/py3k-status-update-10-6681398990092286007.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the tenth status update about our work on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22py3k%22%29"&gt;py3k branch&lt;/a&gt;, which we&lt;br&gt;
can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There's been significant progress since the last update: the &lt;a class="reference external" href="https://buildbot.pypy.org/summary?branch=py3k"&gt;linux x86-32&lt;br&gt;
buildbot&lt;/a&gt; now passes 289 out of approximately 354 modules (with 39 skips) of&lt;br&gt;
CPython's regression test suite.&lt;/p&gt;&lt;p&gt;That means there's only 26 test module failures left! The list of major items&lt;br&gt;
remaining for 3.2 compatibility are now short enough to list here, with their&lt;br&gt;
related tests:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;Tokenizer support for non-ascii identifiers&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_importlib&lt;/li&gt;
&lt;li&gt;test_pep263&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;memoryview (Manuel Jacob's tackling this on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/compare/py3k-memoryview..py3k"&gt;py3k-memoryview branch&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_memoryview&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;multiprocessing module currently deadlocks&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_multiprocessing&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;Buggy handling of the new extended unpacking syntax by the compiler:&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_unpack_ex&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;The new Global Interpreter Lock and new thread signal handling&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_threading&lt;/li&gt;
&lt;li&gt;test_threadsignals&lt;/li&gt;
&lt;li&gt;test_sys&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;Upgrade unicodedata to 6.0.0 (requires updates to the actual unicodedata&lt;br&gt;
generation script)&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_ucn&lt;/li&gt;
&lt;li&gt;test_unicode&lt;/li&gt;
&lt;li&gt;test_unicodedata&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference external" href="https://www.pypy.org/posts/2010/04/using-cpython-extension-modules-with-5864754772659599217.html"&gt;CPyExt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_capi (currently crashes)&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;Update int's hash code to match to CPython (float's is already updated on the&lt;br&gt;
&lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/compare/py3k-newhash..py3k"&gt;py3k-newhash branch&lt;/a&gt;. note that PyPy 2.x doesn't even totally match&lt;br&gt;
CPython's hashing)&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_decimal&lt;/li&gt;
&lt;li&gt;test_fractions&lt;/li&gt;
&lt;li&gt;test_numeric_tower&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;Miscellaneous:&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;test_complex&lt;/li&gt;
&lt;li&gt;test_float&lt;/li&gt;
&lt;li&gt;test_peepholer&lt;/li&gt;
&lt;li&gt;test_range&lt;/li&gt;
&lt;li&gt;test_sqlite (a new cffi based version seems to be coming)&lt;/li&gt;
&lt;li&gt;test_ssl&lt;/li&gt;
&lt;li&gt;test_struct&lt;/li&gt;
&lt;li&gt;test_subprocess&lt;/li&gt;
&lt;li&gt;test_sys_settrace&lt;/li&gt;
&lt;li&gt;test_time&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Additionally there are still a number of failures in PyPy's internal test&lt;br&gt;
suite. These tests are usually ran against untranslated versions of PyPy during&lt;br&gt;
development. However we've now began running them against a fully translated&lt;br&gt;
version of PyPy on the buildbot too (thanks to Amaury for setting this&lt;br&gt;
up). This further ensures that our tests and implementation are sane.&lt;/p&gt;&lt;p&gt;We're getting closer to producing an initial alpha release. Before that happens&lt;br&gt;
we'd like to see:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;further test fixes&lt;/li&gt;
&lt;li&gt;the results of test runs on other major platforms (e.g. linux x86-64 and osx&lt;br&gt;
seem to have some additional failures as of now)&lt;/li&gt;
&lt;li&gt;some basic real world testing&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Finally I'd like to thank Manuel Jacob for his various contributions over the&lt;br&gt;
past month, including fixing the array and ctypes modules among other things,&lt;br&gt;
and also Amaury Forgeot d'Arc for his ongoing excellent contributions.&lt;/p&gt;&lt;p&gt;cheers,&lt;br&gt;
Phil&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2013/03/py3k-status-update-10-6681398990092286007.html</guid><pubDate>Tue, 05 Mar 2013 20:00:00 GMT</pubDate></item><item><title>Py3k status update #9</title><link>https://www.pypy.org/posts/2013/01/py3k-status-update-9-98332471264591773.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the ninth status update about our work on the &lt;a class="reference external" href="https://foss.heptapod.net/pypy/pypy/-/tree/branch/py3k"&gt;py3k branch&lt;/a&gt;, which&lt;br&gt;
we can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k&lt;br&gt;
proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Just a very short update on December's work: we're now passing about 223 of&lt;br&gt;
approximately 355 modules of CPython's regression test suite, up from passing&lt;br&gt;
194 last month.&lt;/p&gt;&lt;p&gt;Some brief highlights:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;More encoding related issues were addressed. e.g. now most if not all the&lt;br&gt;
multibytecodec test modules pass.&lt;/li&gt;
&lt;li&gt;Fixed some path handling issues (&lt;tt class="docutils literal"&gt;test_os&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;test_ntpath&lt;/tt&gt; and&lt;br&gt;
&lt;tt class="docutils literal"&gt;test_posixpath&lt;/tt&gt; now pass)&lt;/li&gt;
&lt;li&gt;We now pass &lt;tt class="docutils literal"&gt;test_class&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;test_descr&lt;/tt&gt; and almost &lt;tt class="docutils literal"&gt;test_builtin&lt;/tt&gt; (among&lt;br&gt;
other things): these are notable as they are fairly extensive test suites of&lt;br&gt;
core aspects of the langauge.&lt;/li&gt;
&lt;li&gt;Amaury Forgeot d'Arc continued making progress on &lt;a class="reference external" href="https://www.pypy.org/posts/2010/04/using-cpython-extension-modules-with-5864754772659599217.html"&gt;CPyExt&lt;/a&gt; (thanks again!)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;cheers,&lt;br&gt;
Phil&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2013/01/py3k-status-update-9-98332471264591773.html</guid><pubDate>Thu, 10 Jan 2013 06:04:00 GMT</pubDate></item><item><title>Py3k status update #8</title><link>https://www.pypy.org/posts/2012/12/py3k-status-update-8-3932232806458251730.html</link><dc:creator>Philip Jenvey</dc:creator><description>&lt;p&gt;This is the eight status update about our work on the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22py3k%22%29"&gt;py3k branch&lt;/a&gt;, which&lt;br&gt;
we can work on thanks to all of the people who &lt;a class="reference external" href="https://www.pypy.org/posts/2012/01/py3k-and-numpy-first-stage-thanks-to-3008917396290059758.html"&gt;donated&lt;/a&gt; to the &lt;a class="reference external" href="https://pypy.org/py3donate.html"&gt;py3k&lt;br&gt;
proposal&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Just a short update on November's work: we're now passing about 194 of&lt;br&gt;
approximately 355 modules of CPython's regression test suite, up from passing&lt;br&gt;
160 last month. Many test modules only fail a small number of individual tests&lt;br&gt;
now.&lt;/p&gt;&lt;p&gt;We'd like to thank Amaury Forgeot d'Arc for his contributions, in particular he&lt;br&gt;
has made significant progress on updating &lt;a class="reference external" href="https://www.pypy.org/posts/2010/04/using-cpython-extension-modules-with-5864754772659599217.html"&gt;CPyExt&lt;/a&gt; for Python 3 this month.&lt;/p&gt;&lt;p&gt;Some other highlights:&lt;/p&gt;&lt;ul class="simple"&gt;&lt;li&gt;&lt;tt class="docutils literal"&gt;test_marshal&lt;/tt&gt; now passes, and there's been significant progress on&lt;br&gt;
pickling (thanks &lt;a class="reference external" href="https://twitter.com/Joushou"&gt;Kenny Levinsen&lt;/a&gt; and Amaury for implementing&lt;br&gt;
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;int.{to,from}_bytes&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;We now have a &lt;tt class="docutils literal"&gt;_posixsubprocess&lt;/tt&gt; module&lt;/li&gt;
&lt;li&gt;More encoding related fixes, which affects many failing tests&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_sre&lt;/tt&gt; was updated and now &lt;tt class="docutils literal"&gt;test_re&lt;/tt&gt; almost passes&lt;/li&gt;
&lt;li&gt;Exception behavior is almost complete per the Python 3 specs, what's mostly&lt;br&gt;
missing now are the new &lt;tt class="docutils literal"&gt;__context__&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__traceback__&lt;/tt&gt; attributes (&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3134/"&gt;PEP&lt;br&gt;
3134&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed some crashes and deadlocks occurring during the regression tests&lt;/li&gt;
&lt;li&gt;We merged the &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22unicode-strategies%22%29"&gt;unicode-strategies&lt;/a&gt; branch both to default and to py3k: now we&lt;br&gt;
have versions of lists, dictionaries and sets specialized for unicode&lt;br&gt;
elements, as we already had for strings.&lt;/li&gt;
&lt;li&gt;However, for string-specialized containers are still faster in some cases&lt;br&gt;
because there are shortcuts which have not been implemented for unicode yet&lt;br&gt;
(e.g., constructing a set of strings from a list of strings). The plan is to&lt;br&gt;
completely kill the shortcuts and improve the JIT to produce the fast&lt;br&gt;
version automatically for both the string and unicode versions, to have a&lt;br&gt;
more maintainable codebase without sacrificing the speed. The &lt;a class="reference external" href="https://bitbucket.org/pypy/pypy/commits/all/tip/branch%28%22autoreds%22%29"&gt;autoreds&lt;/a&gt;&lt;br&gt;
branch (already merged) was a first step in this direction.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;cheers,&lt;br&gt;
Philip&amp;amp;Antonio&lt;/p&gt;</description><category>pypy3</category><guid>https://www.pypy.org/posts/2012/12/py3k-status-update-8-3932232806458251730.html</guid><pubDate>Tue, 04 Dec 2012 22:30:00 GMT</pubDate></item></channel></rss>