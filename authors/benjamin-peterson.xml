<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyPy (Posts by Benjamin Peterson)</title><link>https://www.pypy.org/</link><description></description><atom:link href="https://www.pypy.org/authors/benjamin-peterson.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2025 &lt;a href="mailto:pypy-dev@pypy.org"&gt;The PyPy Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 07 Jul 2025 11:01:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PyPy gets a new compiler</title><link>https://www.pypy.org/posts/2009/08/pypy-gets-new-compiler_25-6401910947439531107.html</link><dc:creator>Benjamin Peterson</dc:creator><description>&lt;p&gt;Today, I merged the parser-compiler branch, which I have been working on over the summer. It contained a total rewrite of both PyPy's Python parser and AST compiler. PyPy's old parser was (in)famous internally for being complicated and slow (with many algorithmic complexities greater than O(n)). The new parser is a simple as &lt;a href="https://codespeak.net/viewvc/pypy/trunk/pypy/interpreter/pyparser/parser.py?view=markup"&gt;I could make it&lt;/a&gt; LL(1) parser like CPython (though it doesn't share the hacks of CPython's parser).&lt;/p&gt;

&lt;p&gt;The new compiler is based on the &lt;a href="https://doc.python.org/3.1/library/ast"&gt;Abstract Syntax Trees (AST) that CPython 2.5 introduced&lt;/a&gt; instead of PyPy's old AST based on the &lt;a href="https://doc.python.org/library/compiler"&gt;compiler package's&lt;/a&gt;. This means that Python code running on PyPy will be able to use the same _ast interface as CPython. PyPy's _ast implementation supports AST features that CPython 2.6 added, including &lt;a href="https://pythonic.pocoo.org/2008/3/29/ast-compilation-from-python"&gt;compiling modified AST to bytecode and executing it&lt;/a&gt;. In this rewrite, some more obscure compiler features were added, too. For example, jumps in bytecode can now be greater than 65535 bytes! (That's like an if statement with 7000 lines of code in the body.)&lt;/p&gt;

&lt;p&gt;While the PyPy translation toolchain still has many obscure details and hacks, this merge completes the process of making the actual Python interpreter very clean. Hopefully, this will make adding new features much easier and make PyPy less frustrating to maintain as well as providing application level code with an improved AST interface!&lt;/p&gt;</description><category>compiler</category><category>parser</category><category>speed</category><guid>https://www.pypy.org/posts/2009/08/pypy-gets-new-compiler_25-6401910947439531107.html</guid><pubDate>Tue, 25 Aug 2009 16:05:00 GMT</pubDate></item></channel></rss>